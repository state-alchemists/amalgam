configs:

  prepareMyFrontendDeployment:
    useImagePrefix: true
    imagePrefix: '{{ .GetValue "defaultImagePrefix" }}'
    namespace: default
    imageName: my-app
    imageTag: latest
    replicaCount: 1
    serviceType: LoadBalancer
    serviceEnabled: true
    ports: |-
      3001
    start: |-
      # Activate venv
      #
      if [ ! -d "./venv" ]
      then
       echo "${_YELLOW}${_CONSTRUCTION_ICON} Create virtual environment.${_NORMAL}"
       python -m venv ./venv
      fi
      source ./venv/bin/activate
      echo "${_YELLOW}${_CONSTRUCTION_ICON} Install pip packages.${_NORMAL}"
      pip install -r requirements.txt
      #
      # Prepare Variable
      #
      DEPLOYMENT_CONFIG={}
      IMAGE_NAME="{{ .GetDockerImageName }}"
      IMAGE_TAG="{{ if .GetConfig "imageTag" }}{{ .GetConfig "imageTag" }}{{ else }}latest{{ end }}"
      RAW_ENVS='{{ .Util.Json.FromStringDict .GetEnvs }}'
      #
      # Generate deployment configuration
      #
      . '{{ .GetProjectPath "zaruba-tasks/myFrontendDeployment/bash/util.sh" }}'
      . '{{ .GetProjectPath "zaruba-tasks/myFrontendDeployment/bash/prepareVariables.sh" }}'
      echo "${_YELLOW}${_CONSTRUCTION_ICON} Deployment config:${_NORMAL} ${DEPLOYMENT_CONFIG}"
      #
      # Prepare Chart
      #
      ${ZARUBA_BIN} json print "${DEPLOYMENT_CONFIG}" '{{ .GetProjectPath "myFrontendDeployment/config/config.json" }}'
      . '{{ .GetProjectPath "zaruba-tasks/myFrontendDeployment/bash/prepareChart.sh" }}'

