configs:

  prepareMyLibSvcDeployment:
    useImagePrefix: true
    imagePrefix: '{{ .GetValue "defaultImagePrefix" }}'
    namespace: '{{ if .GetValue "myLibSvcDeploymentspace" }}{{ .GetValue "myLibSvcDeploymentspace" }}{{ else }}default{{ end }}'
    imageName: my-app
    imageTag: '{{ if .GetValue "ztplDeploymentImageTag" }}{{ .GetValue "ztplDeploymentImageTag" }}{{ else }}latest{{ end }}'
    replicaCount: '{{ if .GetValue "ztplDeploymentReplicaCount" }}{{ .GetValue "ztplDeploymentReplicaCount" }}{{ else }}1{{ end }}'
    serviceType: '{{ if .GetValue "ztplDeploymentServiceType" }}{{ .GetValue "ztplDeploymentServiceType" }}{{ else }}ClusterIP{{ end }}'
    serviceEnabled: '{{ if .GetValue "ztplDeploymentServiceEnabled" }}{{ .GetValue "ztplDeploymentServiceEnabled" }}{{ else }}true{{ end }}'
    fullnameOverride: 'lib-svc'
    ports: |
      3000
    start: |-
      # Activate venv
      #
      if [ ! -d "./venv" ]
      then
        echo "${_YELLOW}${_CONSTRUCTION_ICON} Create virtual environment.${_NORMAL}"
        python -m venv ./venv
      fi
      source ./venv/bin/activate
      echo "${_YELLOW}${_CONSTRUCTION_ICON} Install pip packages.${_NORMAL}"
      pip install -r requirements.txt
      #
      # Prepare Variable
      #
      DEPLOYMENT_CONFIG={}
      IMAGE_NAME="{{ .GetDockerImageName }}"
      IMAGE_TAG="{{ if .GetConfig "imageTag" }}{{ .GetConfig "imageTag" }}{{ else }}latest{{ end }}"
      RAW_ENVS='{{ .Util.Json.FromStringDict .GetEnvs }}'
      #
      # Generate deployment configuration
      #
      . '{{ .GetProjectPath "zaruba-tasks/myLibSvcDeployment/bash/util.sh" }}'
      . '{{ .GetProjectPath "zaruba-tasks/myLibSvcDeployment/bash/prepareVariables.sh" }}'
      echo "${_YELLOW}${_CONSTRUCTION_ICON} Deployment config:${_NORMAL} ${DEPLOYMENT_CONFIG}"
      #
      # Prepare Chart
      #
      ${ZARUBA_BIN} json print "${DEPLOYMENT_CONFIG}" '{{ .GetProjectPath "myLibSvcDeployment/config/config.json" }}'
      . '{{ .GetProjectPath "zaruba-tasks/myLibSvcDeployment/bash/prepareChart.sh" }}'

